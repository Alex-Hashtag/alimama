version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:16.3
    container_name: alimama-postgres-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      # - postgres-data:/var/lib/pqsql/data
      - ./database/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my-network

  # MongoDB
  mongo:
    image: mongo:6
    container_name: alimama-mongodb-container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      # - mongo-data:/data/db
      - ./database/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - my-network

  # Spring Boot
  springboot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alimama-springboot-container
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_HOST: mongo
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - postgres
      - mongo
    networks:
      - my-network
    ports:
      - "8080:8080"

  # React.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: alimama-frontend-container
    ports:
      - "3000:80"
    networks:
      - my-network

volumes:
  postgres-data:
  mongo-data:

networks:
  my-network:
    driver: bridge
